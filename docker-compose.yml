version: '3.3'
services:
  backend:
    image: golang:1.19-alpine3.16
    container_name: golang
    environment:
      - POSTGRES_USER:${POSTGRES_USER}
      - POSTGRES_PASSWORD:${POSTGRES_PASSWORD}
      - POSTGRES_DB:${POSTGRES_DB}
      - POSTGRES_DB_HOST:${POSTGRES_DB_HOST}
      - POSTGRES_PORT:${POSTGRES_PORT}
    env_file:
      - .env
    build:
      context: .
      dockerfile: go.dockerfile
    ports:
      - 8080:8080
    restart: on-failure
    volumes:
      - .:/app
    working_dir: /app
    command: "go run /app/main.go"
    depends_on:
      - postgresdb

  frontend:
    image: httpd:alpine
    volumes:
      - ./frontend:/usr/local/apache2/htdocs/
    ports:
      - 8888:80
    restart: always

  postgresdb:
    image: postgres:latest
    container_name: postgresql
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    env_file:
      - .env
    ports:
      - '5432:${POSTGRES_PORT}'
    volumes:
      - ./psql-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 3s
      retries: 5

volumes:
  postgres-data-volume: